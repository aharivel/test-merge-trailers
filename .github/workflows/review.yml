# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2025 Robin Jarry
---
name: Review

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: write

jobs:
  approved:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    steps:
      - name: Generate trailer-bot app token
        uses: actions/create-github-app-token@v2
        id: bot
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.bot.outputs.token }}
          fetch-depth: 0
          persist-credentials: false

      - name: Resolve reviewer name and email
        id: trailer
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const user = await github.rest.users.getByUsername({username: context.actor});
            if (user.name == null) {
              core.setFailed(`user @${context.actor} does not expose their real name`);
              process.exit(1);
            }
            if (user.email == null) {
              await exec.exec('sh', ['-c', `git log --pretty=%aE --author="${user.name}" | head -n1`], {
                failOnStdErr: true,
                listeners: {
                  stdline: (data) => {
                    user.email = data.toString();
                  },
                },
              });
              if (user.email == null) {
                core.setFailed(`user @${context.actor} does not expose their email and is unknown from git history`);
                process.exit(1);
              }
            }
            return `Reviewed-by: ${user.name} <${user.email}>`;

      - run: .github/workflows/add-trailer.sh
        env:
          GH_TOKEN: ${{ steps.bot.outputs.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_COMMITS: ${{ github.event.pull_request.commits }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          TRAILER: ${{ steps.trailer.outputs.result }}
