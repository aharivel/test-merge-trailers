# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2025 Robin Jarry
---
name: Trailer

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  add:
    if: ${{ github.event.issue.pull_request && (startsWith(github.event.comment.body, 'Acked-by:') || startsWith(github.event.comment.body, 'Tested-by:')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Resolve trailer data
        id: data
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const regexp = /(acked|tested)-by:\s+(\w[^<]+\w)\s+<?([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})>?/i;
            const match = context.payload.comment.body.match(regexp);
            if (!match) {
              return {};
            }
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            })
            return {
              repository: pr.head.repo.full_name,
              head_ref: pr.head.ref,
              commits: pr.commits,
              number: pr.number,
              trailer: `${match[1]}-by: ${match[2]} <${match[3]}>`,
            };

      - uses: actions/checkout@v4
        if: ${{ success() && fromJSON(steps.data.outputs.result).trailer }}
        with:
          repository: ${{ fromJSON(steps.data.outputs.result).repo }}
          ref: ${{ fromJSON(steps.data.outputs.result).head_ref }}
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
          persist-credentials: false

      - run: .github/workflows/add-trailer.sh
        if: ${{ success() && fromJSON(steps.data.outputs.result).trailer }}
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}
          PR_NUMBER: ${{ fromJSON(steps.data.outputs.result).number }}
          PR_COMMITS: ${{ fromJSON(steps.data.outputs.result).commits }}
          HEAD_REF: ${{ fromJSON(steps.data.outputs.result).head_ref }}
          TRAILER: ${{ fromJSON(steps.data.outputs.result).trailer }}
